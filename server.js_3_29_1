"use strict";

const { Client } = require('pg');
const express = require('express');
const app = express();
app.use(express.json());
app.use(express.static("public"));
const PORT = 8001;
app.listen(PORT);

const clientConfig = {
  user: 'postgres', 
password: 'mypacepostgresql', 
host: 'my-pace-postgresql.cnka62k42bab.us-east-2.rds.amazonaws.com', 
port: 5432, 
ssl: { 
rejectUnauthorized: false, 
} 
};

app.get('/country', async function (req, res) {
const code = req.query['code']; 
const client = new Client(clientConfig); 
  await client.connect(); 
  const result = await client.query("SELECT NAME FROM country WHERE CODE=$1::text", [code]); 
  if (result.rowCount < 1) { 
  res.status(500).send("Internal Error - No Country Found"); 
  } else { 
  res.set("Content-Type", "application/json"); 
  res.send(result.rows[0]); 
 }  
 await client.end(); 
});

app.get('/states', async function (req, res) {
const country = req.query['country'];
const client = new Client(clientConfig); 
await client.connect(); 
const result1 = await client.query("SELECT state_name, state_code FROM states_by_country WHERE country_code = $1::text", [country]);
if (result1.rowCount < 1) { 
res.status(500).send("Internal Error - No Country Found"); 
} else { 
res.set("Content-Type", "application/json"); 
res.send(result1.rows); 
} 
await client.end(); 
});

app.get('/airlines', async function (req, res) {
const country = req.query['country'];
const client = new Client(clientConfig);
await client.connect();
const result1 = await client.query("SELECT name FROM airlines WHERE country = $1::text", [country]);
if (result1.rowCount < 1) {
res.status(500).send("Internal Error - No Country Found");
} else {
res.set("Content-Type", "application/json");
res.send(result1.rows);
}
await client.end();
});

app.get('/airlines/search', async function (req, res) {
const iata = req.query['iata'];
const icao = req.query['icao'];
const client = new Client(clientConfig);
await client.connect();
if (!icao && !iata) {
  return res.status(400).send("ICAO or IATA code is required");
}
const result1 = await client.query("SELECT name FROM airlines WHERE (iata = $1 OR $1 IS NULL) AND (icao = $2 OR $2 IS NULL)", [iata, icao]);
if (result1.rowCount < 1) {
res.status(500).send("Internal Error - No airlines Found");
} else {
res.set("Content-Type", "application/json");
res.send(result1.rows);
}
await client.end();
});

app.post('/airlines', async function (req, res) {
    const { name, icao, iata, country } = req.body;

    if (!name || !country) {
        return res.status(400).send("Bad Request - 'name' and 'country' are required.");
    }

    const client = new Client(clientConfig);
    await client.connect();
    
    const result1 = await client.query("INSERT INTO airlines (name, icao, iata, country) VALUES ($1, $2, $3, $4) RETURNING *; " , [name, icao || null, iata || null, country] );

    res.status(201).json({
        message: "Airline added successfully"
    });

    await client.end();
});

app.delete('/airlines', async function (req, res) {
const icao = req.query['icao'];
const iata = req.query['iata'];
const client = new Client(clientConfig);
await client.connect();
if (!icao && !iata) {
  return res.status(400).send("ICAO or IATA code is required");
}
const result1 = await client.query("DELETE FROM airlines WHERE iata = $1::text OR icao = $2::text", [iata, icao]);
if (result1.rowCount > 0) {
        res.status(200).send("Airline deleted successfully.");
    } else {
        res.status(404).send("Airline not found.");
    }
await client.end();
});

app.get('/airports', async function (req, res) {
const country = req.query['country'];
const client = new Client(clientConfig);
await client.connect();
const result1 = await client.query("SELECT name FROM airports WHERE country = $1::text", [country]);
if (result1.rowCount < 1) {
res.status(500).send("Internal Error - No Country Found");
} else {
res.set("Content-Type", "application/json");
res.send(result1.rows);
}
await client.end();
});

app.get('/airports/search', async function (req, res) {
const iata = req.query['iata'];
const icao = req.query['icao'];
const client = new Client(clientConfig);
await client.connect();
if (!icao && !iata) {
  return res.status(400).send("ICAO or IATA code is required");
}
const result1 = await client.query("SELECT name FROM airports WHERE iata = $1::text OR icao = $2::text", [iata, icao]);
if (result1.rowCount < 1) {
res.status(500).send("Internal Error - No airports Found");
} else {
res.set("Content-Type", "application/json");
res.send(result1.rows);
}
await client.end();
});

app.post('/airports', async function (req, res) {
    const { name, icao, iata, country } = req.body;

    if (!name || !country) {
        return res.status(400).send("Bad Request - 'name' and 'country' are required.");
    }

    const client = new Client(clientConfig);
    await client.connect();

    const result1 = await client.query("INSERT INTO airports (name, icao, iata, country) VALUES ($1, $2, $3, $4) RETURNING *; " , [name, icao || null, iata || null, country] );


    res.status(201).json({
        message: "Airline added successfully"
    });

    await client.end();
});

app.delete('/airports', async function (req, res) {
const icao = req.query['icao'];
const iata = req.query['iata'];
const client = new Client(clientConfig);
await client.connect();
if (!icao && !iata) {
  return res.status(400).send("ICAO or IATA code is required");
}
const result1 = await client.query("DELETE FROM airports WHERE iata = $1::text OR icao = $2::text", [iata, icao]);
if (result1.rowCount > 0) {
        res.status(200).send("Airline deleted successfully.");
    } else {
        res.status(404).send("Airline not found.");
    }
await client.end();
});
function haversine(lat1, lon1, lat2, lon2) {
  const R = 6378;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;
  return distance;
}
app.get('/routes', async (req, res) => {
  const dep = req.query['dep']; // Departure airport IATA code
  const arr = req.query['arr']; // Arrival airport IATA code
  const client = new Client(clientConfig);
  if (!dep || !arr) {
    return res.status(400).send('Departure and arrival airport codes are required.');
  }

  const result = await client.query("SELECT a1.iata AS dep_iata, a1.latitude AS dep_lat, a1.longitude AS dep_lon, a2.iata AS arr_iata, a2.latitude AS arr_lat, a2.longitude AS arr_lon, r.airline, r.planes FROM airports a1 JOIN airp  orts a2 ON a2.iata = $2::text LEFT JOIN routes r ON r.depature = a1.iata AND r.arrival = a2.iataWHERE a1.iata = $1::text",[dep, arr]);

  if (result.rows.length === 0) {
    return res.status(404).send('No data found for the provided airports.');
  }

  const depAirport = result.rows[0];
  const arrAirport = result.rows[0];

  const distance = haversine(depAirport.dep_lat, depAirport.dep_lon, arrAirport.arr_lat, arrAirport.arr_lon);

  const airlines = result.rows.map(row => ({
    airline: row.airline,
    planes: row.planes
  }));

  res.json({
    distanceInKm: distance,
    airlinesAndPlanes: airlines,
  });
});
